<!doctype html>
<!--[if lt IE 7]>
<html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>
<html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>
<html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>AtlasBoard</title>
    <meta name="viewport" content="width=device-width">

    <script src="/third-party/jquery/jquery-1.8.3.min.js"></script>
    <script src="/third-party/moment/moment.min.js"></script>
    <script src="/javascripts/console-helper.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Open+Sans:300,400,600,700&amp;subset=latin,latin-ext">
    <link rel="icon" type="image/png" href="images/favicon.png"/>

    <script>

      var maxLogsPerContainer = 100;

      var options = {
        'reconnect': true,
        'reconnection delay': 5000,
        'reopen delay': 3000,
        'max reconnection attempts': 100
      };

      var socket_log = io.connect('/log', options);

      socket_log.on("connect", function() {
        console.log('connected');
        $('#main-container').removeClass("disconnected");

        socket_log.on("disconnect", function() {
          $('#main-container').addClass("disconnected");
          console.log('disconnected');
        });

        // reconnect
        socket_log.on('reconnecting', function () {
          console.log('reconnecting...');
        });

        socket_log.on('reconnect_failed', function () {
          console.log('reconnected FAILED');
        });

        socket_log.on('client', function(data){
          log('client', data.error ? 'error' : 'log', JSON.stringify(data));
        });

        socket_log.on('server', function(data){
          log('server', data.type, data.msg);
        });

      });

      function timestamp (){
        return '<span class="timestamp">' + moment().format("MMMM Do, h:mm:ss a") + '</span>';
      }

      //msg_type: log, warn, error
      function log (container, msg_type, content){
        var filter = $('div.filter input', '#' + container).val();
        if (filter){
          if (content.indexOf(filter)==-1)
            return;
        }

        if ($('.pause', '#' + container).is(':checked')){
          return;
        }

        content = '<span class="log_text logtype_' + msg_type + '"">' + escapeHtml(content) + '</span>';
        $('.content', '#' +container).prepend('<div class="entry">' + timestamp() + ' ' + content + '</div>');

        // maintain a limit number of entries in the screen (delete old ones)
        if ($('.content .entry', '#' + container).length == (maxLogsPerContainer + 1)){
          $('.content .entry', '#' + container)[maxLogsPerContainer].remove();
        }
      }

      // escape html - https://github.com/janl/mustache.js/blob/master/mustache.js#L82
      var entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': '&quot;',
        "'": '&#39;',
        "/": '&#x2F;'
      };

      function escapeHtml(string) {
        return String(string).replace(/[&<>"'\/]/g, function (s) {
          return entityMap[s];
        });
      }

      $(function(){
        $('button.clear').click(function(){
          $('div.content', $(this).closest('div.logcontainer')).empty();
        });

        $('.content').on('click', '.entry', function(){
          $(this).toggleClass('expanded');
        });

        $('div.filter input').keyup(function(){
          var filter = $(this).val();
          var entries = $('.content .entry', $(this).closest('div.logcontainer'));
          var pattern = new RegExp(filter);
          entries.each(function(){
            if (filter && !pattern.test($('span.log_text', this).text())){
              $(this).hide();
            }
            else {
              $(this).show();
            }
          });
        });
      });

    </script>
</head>
<body>
<style>

body {
  font: 400 14px/1.6 "Open Sans", sans-serif;
  background-color:white;
  color:black;
  padding: 0px 20px;
  overflow: visible;
}

h1 {
  font: 100 30px "Helvetica Neue", Helvetica, Arial, sans-serif;
}

#main{
  width:100%;
  display:table;
  table-layout:fixed;
}

.entry {
  font-size:12px;
  margin-bottom: 3px;

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

  cursor:pointer;
}

.entry.expanded {
  white-space: normal;
  overflow: visible;
}

span.logtype_log {
  color:black;
}

span.logtype_error {
  color:red;
}

span.logtype_warn {
  color: orange;
  font-weight:bold;
}

span.timestamp{
  color: #ccc;
}

.logcontainer{
  width:50%;
  display: table-cell;

  border-width: 5px;
  border-color:#f5f5f5;
  border-style:solid;
  padding:5px;
}

div.filter {
  margin-bottom:10px;
}

div.filter input {
  border-style:solid;
  border-width: 0 0 1px 0;
  border-color: #f2f2f2;
  width:200px;
}

div.toolbar_actions {
  float:right;
}

</style>

<div id="main">

  <div class="logcontainer" id="server">
    <h1>Server</h1>
    <div class="toolbar_actions">
      <input class="pause" type="checkbox"> pause
      <button  class="clear">clear logs</button>
    </div>

    <div class="filter">
      filter: <input type="text" placeholder=" - use regex for dynamic filtering - " />
    </div>

    <div class="content"></div>
  </div>

  <div class="logcontainer" id="client">
    <h1>Client</h1>
    <div class="toolbar_actions">
      <button  class="clear">clear logs</button> <input class="pause" type="checkbox"> pause
    </div>

    <div class="filter">
      filter: <input type="text" placeholder=" - use regex for dynamic filtering - " />
    </div>

    <div class="content"></div>
  </div>

</div>
</body>
</html>
